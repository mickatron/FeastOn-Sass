////
/// @group Shapes
/// @author Michael Hargreaves
////

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color 
/// @param {Length} $size [1em] - Triangle size
/// @group Colour, Shape &amp; Effects
@mixin triangle($direction, $color: currentcolor, $width: 1rem, $height: 1rem) {
  @if not index(top right bottom left, $direction) {
    @error 'Direction must be either `top`, `right`, `bottom` or `left`.';
  }

  content: '';
  width: 0;
  height: 0;
  z-index: 2;
  border-#{opposite-direction($direction)}: ($width * 1.5) solid $color;
  
  $perpendicular-borders: $height solid transparent;
  
  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}

/// Basic Chevron Mixin. icon is create by putting borders on two sides of a square HTML element.
/// This has limited animation capabilities. Needs re-factoring.
@mixin i-chevron ($rotate: 45deg, $size: .5rem, $border-width: .25rem, $color: get-color(base, black)) {

  &::before {
    content: '';
    display: inline-block;
    position: relative;
    border-style: solid;
    border-width: $border-width $border-width 0 0;
    border-color: $color;
    height: $size;
    top: .15em;
    transform: rotate($rotate);
    vertical-align: top;
    width: $size;
  }
}

/// Burger Menu Icon Mixin
/// Can be animated
/// Could be improved with :before and :after 
@mixin i-menu ($color: get-color(base, black), $width: 2rem, $height: 1.1rem) {
  display: inline-block;
  position: relative;
  background: none;
  border: 0;
  width: $width;
  height: $height;
  transform: rotate(0deg);
  transition: .5s ease-in-out;
  cursor: pointer;

  span {
    display: block;
    position: absolute;
    height: 2px;
    width: 100%;
    background: $color;
    border-radius: 6px;
    opacity: 1;
    left: 0;
    transform: rotate(0deg);
    transition: .25s ease-in-out;

    &:nth-child(1) {
      top: 0;
      transform-origin: left center;
    }

    &:nth-child(2) {
      @include pos-v-center;
      transform-origin: left center;
    }

    &:nth-child(3) {
      bottom: 0;
      transform-origin: left center;
    }
  }

  &[data-open='true'] {
    span {
      &:nth-child(1) {
        transform: rotate(45deg);
        top: -3px;
        left: 4px;
      }

      &:nth-child(2) {
        width: 0%;
        opacity: 0;
      }

      &:nth-child(3) {
        transform: rotate(-45deg);
        top: $height;
        left: 4px;
      }
    }
  }
}
